I want to create a fictional game, context.

We want to demonstrate how story slicing (inspired by elephant carpaccio from Alistair Cockburn) can deliver value quicker than a traditional waterfall approach.

There will be several teams (product and engineers) who will develop APIs which will receive orders.

For each team, they will register endpoints through a UI (which will be a fictional company just like JustEat or Deliveroo or UberEats),  where orders will be POSTed from First Slice  to each team which will represent a takeaway company.

## How it works. 

Processing orders and correctly delivering to the requirements will result in a batch of points per order for your team.  The more of the requirements you build, the more points per order you can achieve.  Keep in mind, the quicker you build and deploy, the more opportunity for accumulating points early and often regardless of a full implementation.

First Slice will distribute a fixed number orders equally, asynchronosuly, to all registered companies every minute.  If only one company is registered, they will get the full batch of orders.  Two companies, 50/50 split etc.

To ensure all players can earn equal amount of points, all orders each team gets will be identical.

Think very carefully about the requirements.  Can you identify the slices?  Remember, this is intentionally exagerated for deliberate practice.   


## Requirements.

As a company, you will integrate with the First-Slice order platform.  
Your endpoint must accept orders in a JSON format.
Your endpoint must return a valid HTTP 200 response.

There are two order types that you must process.  Online and Telephone.  Below are the requirements for each.  You will receive 1 point for each successful 200 response to an order, regardless of any additional processing.

### Telephone.

Correctly processing telephone orders gives your team an additional 1 point.

example request
{
    "orderType": "telephone"
}

expected response
{
    "number": "07921111111" 
}

### Delivery

Cash payment at the door.  These represent orders which your delivery driver will be responsible for collecting payment.  To succesfully process a delivery with cash payment, you must return a calculated order total response, this will be distance multiplied by feePerMile with a multiplier of 0.1 per ordered item plus the sum of all item costs.  Accepting the order (200 response) will earn 1 point and a valid calculated total will earn you 1 additional point.   Opportunity is 2 points for this type of order.

If you return a driver name, you will earn an additional point.

For example, 

2 items, priced at £6 each, with a distance of 2 and a feePerMile of .60 will have an orderTotal of 

(sum of item costs) + (delivery distance * fee per mile) * (number of items * delivery item multiplier)

(6 + 6) + (2 * 0.6) + (2 * 0.1).

example request
{
    "orderType": "delivery",
    "payment": "cash" | "online"
    "paymentToken": string
    "items": [
        {
            "name": string,
            "cost": number, 
            "quantity": number
        }
    ]
    "delivery": {
        "distance": number
        "feePerMile" number
        "deliveryItemMultiplier": number
    }
}

example response 

{
    "orderTotal": number
    "driver": string
}

4. Tax... HMRC wants a slice of course...  You are required to report the VAT for each order.  For every order which contains items and delivery, if you respond with a valid VAT amount, you will earn 1 additional point for that given order.

example request
{
    "orderType": "delivery",
    "payment": "cash" | "online"
    "items": [
        {
            "name": string,
            "cost": number, 
            "quantity": number
        }
    ]
    "delivery": {
        "distance": number
        "feePerMile" number
        "deliveryItemMultiplier": number
    }
}

example response 
{
    "orderTotal": number
    "driver": string
    "vat": number
}


4. Order distance exceeding 5 miles are beyond what your drivers are happy with. To incentivise your drivers, you may charge an additonal £2 per mile beyond 5 miles.  You will earn 1 additional point if your response includes the delivery surchage, with the correct calculated value.

example request
{
    "orderType": "delivery",
    "payment": "cash" | "online"
    "items": [
        {
            "name": string,
            "cost": number, 
            "quantity": number
        }
    ]
    "delivery": {
        "distance": number,
        "feePerMile" number,
        "deliveryItemMultiplier": number
    }
}

example response 
{
    "orderTotal": number,
    "driver": string,
    "deliverySurcharge": number,
    "vat": number
}


4. To limit frauf, you should imediately validate orders upon request to ensure payment tokens are valid when payment type is of "online".  For every token validated, you will earn 2 additional point per order.  

example request from First-Slice
{
    "orderType": "delivery",
    "payment": "cash" | "online"
    "items": [
        {
            "name": string,
            "cost": number, 
            "quantity": number
        }
    ]
    "delivery": {
        "distance": number,
        "feePerMile" number,
        "deliveryItemMultiplier": number
    }
}

example response to First-Slice
{
    "orderTotal": number,
    "driver": string,
    "deliverySurcharge": number,
    "vat": number
}

example request to First-Slice to validate tokens
{
    "paymentToken": string
}

example respone from First Slice to validate tokens
{
    "status": "settled"
}